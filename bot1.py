import disnake
from disnake.ext import commands, tasks
from disnake import TextInputStyle
import json
import os
from datetime import datetime
import io
import re
import random
import string

intents = disnake.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVER_CONFIGS = {
    # –ü–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä (–∏–∑ main.py)
    1429544000188317831: {
        "static_channel_id": 1429831404379705474,
        "admin_role_ids": [1310673963000528949, 1223589384452833290, 1429544345463296000],
        "data_file": "rollback_data_server1.json"
    },
    # –í—Ç–æ—Ä–æ–π —Å–µ—Ä–≤–µ—Ä (–∏–∑ bot1.py)
    1003525677640851496: {
        "static_channel_id": 1429128623776075916,
        "admin_ids": [1381084245321056438, 427922282959077386, 300627668460634124, 773983223595139083, 415145467702280192],
        "data_file": "rollback_data.json"
    }
}

def get_server_config(guild_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return SERVER_CONFIGS.get(guild_id)

def get_data_file(guild_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    config = get_server_config(guild_id)
    if config:
        return config.get("data_file", "rollback_data.json")
    return "rollback_data.json"

def load_data(guild_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    data_file = get_data_file(guild_id)
    if os.path.exists(data_file):
        with open(data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"lists": {}, "settings": {}}

def save_data(guild_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    data_file = get_data_file(guild_id)
     directory = os.path.dirname(data_file)
    if directory and not os.path.exists(directory):
        os.makedirs(directory, exist_ok=True)
    with open(data_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_admin(member):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not member:
        return False
    
    config = get_server_config(member.guild.id)
    if not config:
        return False
    
    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–æ–ª—è–º
    if member.guild.id == 1429544000188317831:
        try:
            member_role_ids = [role.id for role in member.roles]
            return any(role_id in config["admin_role_ids"] for role_id in member_role_ids)
        except:
            return False
    # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif member.guild.id == 1003525677640851496:
        try:
            return member.id in config["admin_ids"]
        except:
            return False
    
    return False

def generate_list_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))

def create_new_list(list_id, list_name, channel_id, created_by, guild_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    data = load_data(guild_id)
    config = get_server_config(guild_id)
    
    data["lists"][list_id] = {
        "id": list_id,
        "name": list_name,
        "channel_id": channel_id,  # –ö–∞–Ω–∞–ª –≥–¥–µ —Å–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
        "static_channel_id": config["static_channel_id"] if config else channel_id,
        "created_by": created_by,
        "guild_id": guild_id,
        "created_at": datetime.now().isoformat(),
        "participants": {},
        "rollbacks": {},
        "message_id": None,
        "status_message_id": None
    }
    save_data(guild_id, data)
    return data["lists"][list_id]

def get_list(list_id, guild_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ ID –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    data = load_data(guild_id)
    return data["lists"].get(list_id)

def remove_user_rollback(list_data, user_id):
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in list_data["participants"]:
        return False
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rollbacks_to_remove = []
    for timestamp, rollback in list_data["rollbacks"].items():
        if rollback["user_id"] == user_id:
            rollbacks_to_remove.append(timestamp)
    
    for timestamp in rollbacks_to_remove:
        del list_data["rollbacks"][timestamp]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–∞
    list_data["participants"][user_id]["has_rollback"] = False
    
    return True

def clean_rollback_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean_text = re.sub(r'\s+', ' ', clean_text)
    clean_text = clean_text.strip()
    
    return clean_text

async def update_status_message(list_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–∫–∞—Ç–æ–≤ –≤ –°–¢–ê–¢–ò–ß–ï–°–ö–û–ú –∫–∞–Ω–∞–ª–µ"""
    try:
        config = get_server_config(list_data["guild_id"])
        if not config:
            return
            
        channel_id = config["static_channel_id"]  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        channel = bot.get_channel(channel_id)
        if not channel:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        total_participants = len(list_data['participants'])
        completed_rollbacks = sum(1 for p in list_data['participants'].values() if p['has_rollback'])
        
        message_content = f"üìä **–°–¢–ê–¢–£–° –û–¢–ö–ê–¢–û–í: {list_data['name']}**\n\n"
        message_content += f"üìã ID —Å–ø–∏—Å–∫–∞: `{list_data['id']}`\n"
        message_content += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{total_participants}**\n"
        message_content += f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–∞—Ç: **{completed_rollbacks}** / **{total_participants}**\n"
        message_content += f"{'='*50}\n\n"
        
        if not list_data['participants']:
            message_content += "*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç*\n"
        else:
            for user_id, participant in sorted(list_data['participants'].items(), key=lambda x: x[1]['registered_at']):
                status = "üü¢" if participant['has_rollback'] else "üî¥"
                username = participant['display_name']
                message_content += f"{status} **{username}**\n"
                
                if participant['has_rollback']:
                    user_rollback = None
                    for rollback in list_data['rollbacks'].values():
                        if rollback['user_id'] == user_id:
                            user_rollback = rollback
                            break
                    if user_rollback:
                        rollback_text = user_rollback['text']
                        if rollback_text:
                            rollback_preview = rollback_text[:150]
                            if len(rollback_text) > 150:
                                rollback_preview += "..."
                            message_content += f"  ‚îî üìù {rollback_preview}\n"
                message_content += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        status_message_id = list_data.get("status_message_id")
        data = load_data(list_data["guild_id"])
        
        if status_message_id:
            try:
                status_message = await channel.fetch_message(status_message_id)
                await status_message.edit(content=message_content)
                return
            except:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ
                pass
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = await channel.send(message_content)
        list_data["status_message_id"] = new_message.id
        data["lists"][list_data["id"]] = list_data
        save_data(list_data["guild_id"], data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∏—Å–∫–∞ {list_data['id']}: {e}")

class CreateListModal(disnake.ui.Modal):
    def __init__(self, guild_id):
        self.guild_id = guild_id
        components = [
            disnake.ui.TextInput(
                label="–í—Ä–µ–º—è",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00)",
                custom_id="time",
                style=TextInputStyle.short,
                max_length=10,
                required=True
            ),
            disnake.ui.TextInput(
                label="–î–∞—Ç–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.10.2025)",
                custom_id="date",
                style=TextInputStyle.short,
                max_length=20,
                required=True
            ),
            disnake.ui.TextInput(
                label="–ù–∞–∑–≤–∞–Ω–∏–µ",
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
                custom_id="name",
                style=TextInputStyle.short,
                max_length=50,
                required=True
            ),
            disnake.ui.TextInput(
                label="–°–µ—Ä–≤–µ—Ä —Å–æ–±—ã—Ç–∏—è",
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
                custom_id="event_server",
                style=TextInputStyle.short,
                max_length=50,
                required=True
            )
        ]
        super().__init__(title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        data = load_data(self.guild_id)
        time_value = inter.text_values["time"].strip()
        date_value = inter.text_values["date"].strip()
        name_value = inter.text_values["name"].strip()
        server_value = inter.text_values["event_server"].strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 5-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID
        list_id = generate_list_id()
        while list_id in data["lists"]:
            list_id = generate_list_id()
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        full_name = f"{time_value} | {date_value} | {name_value} | {server_value}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª, –≥–¥–µ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        channel_id = inter.channel_id
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫
        list_data = create_new_list(list_id, full_name, channel_id, str(inter.author.id), self.guild_id)
        
        config = get_server_config(self.guild_id)
        static_channel_mention = f"<#{config['static_channel_id']}>" if config else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        await inter.response.send_message(
            f"‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω!\n"
            f"ID: `{list_id}`\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {full_name}\n"
            f"–ö–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏: {inter.channel.mention}\n"
            f"–°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤: {static_channel_mention}\n\n"
            f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"`/register_user list_id:{list_id} users:@—É—á–∞—Å—Ç–Ω–∏–∫1 @—É—á–∞—Å—Ç–Ω–∏–∫2`",
            ephemeral=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ –≥–¥–µ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        await update_participants_message(inter.channel, list_data)
        # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
        await update_status_message(list_data)

class RollbackModal(disnake.ui.Modal):
    def __init__(self, list_id, guild_id, has_existing_rollback=False):
        self.list_id = list_id
        self.guild_id = guild_id
        self.has_existing_rollback = has_existing_rollback
        
        placeholder = "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
        if has_existing_rollback:
            placeholder = "–í–∞—à —Å—Ç–∞—Ä—ã–π –æ—Ç–∫–∞—Ç –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π..."
        
        components = [
            disnake.ui.TextInput(
                label="–í–∞—à –æ—Ç–∫–∞—Ç",
                placeholder=placeholder,
                custom_id="rollback_text",
                style=TextInputStyle.paragraph,
                max_length=2000,
                required=True
            )
        ]
        
        title = "–ó–∞–º–µ–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç" if has_existing_rollback else "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç"
        super().__init__(title=title, components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        list_data = get_list(self.list_id, self.guild_id)
        if not list_data:
            await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
            
        user_id = str(inter.author.id)
        
        if user_id not in list_data["participants"]:
            await inter.response.send_message(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                ephemeral=True
            )
            return
            
        rollback_text = inter.text_values["rollback_text"]
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_text = clean_rollback_text(rollback_text)
        
        if not cleaned_text:
            await inter.response.send_message(
                "‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∫–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∫–∞—Ç —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞–º–∏.",
                ephemeral=True
            )
            return
        
        timestamp = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        server_nickname = inter.author.display_name
        list_data["participants"][user_id]["display_name"] = server_nickname
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–∫–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.has_existing_rollback:
            remove_user_rollback(list_data, user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∫–∞—Ç
        list_data["rollbacks"][timestamp] = {
            "user_id": user_id,
            "user_name": server_nickname,
            "text": cleaned_text,
            "timestamp": timestamp
        }
        list_data["participants"][user_id]["has_rollback"] = True
        
        data = load_data(self.guild_id)
        data["lists"][self.list_id] = list_data
        save_data(self.guild_id, data)
        
        if self.has_existing_rollback:
            message = f"‚úÖ –í–∞—à –æ—Ç–∫–∞—Ç –≤ —Å–ø–∏—Å–∫–µ '{list_data['name']}' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π! –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω."
        else:
            message = f"‚úÖ –í–∞—à –æ—Ç–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '{list_data['name']}'! –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω."
            
        await inter.response.send_message(message, ephemeral=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞
        channel = bot.get_channel(list_data["channel_id"])
        if channel:
            await update_participants_message(channel, list_data)
        # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
        await update_status_message(list_data)

class DeleteRollbackView(disnake.ui.View):
    def __init__(self, list_id, guild_id):
        super().__init__(timeout=60)
        self.list_id = list_id
        self.guild_id = guild_id
    
    @disnake.ui.button(label="–î–∞, —É–¥–∞–ª–∏—Ç—å –º–æ–π –æ—Ç–∫–∞—Ç", style=disnake.ButtonStyle.danger)
    async def confirm_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        list_data = get_list(self.list_id, self.guild_id)
        if not list_data:
            await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
            
        user_id = str(inter.author.id)
        
        if user_id not in list_data["participants"]:
            await inter.response.send_message("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ!", ephemeral=True)
            return
            
        if not list_data["participants"][user_id]["has_rollback"]:
            await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞!", ephemeral=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–∞—Ç
        if remove_user_rollback(list_data, user_id):
            data = load_data(self.guild_id)
            data["lists"][self.list_id] = list_data
            save_data(self.guild_id, data)
            
            await inter.response.send_message(
                f"‚úÖ –í–∞—à –æ—Ç–∫–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ '{list_data['name']}'!", 
                ephemeral=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            channel = bot.get_channel(list_data["channel_id"])
            if channel:
                await update_participants_message(channel, list_data)
            await update_status_message(list_data)
        else:
            await inter.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–∞—Ç!", ephemeral=True)
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await inter.message.delete()
    
    @disnake.ui.button(label="–û—Ç–º–µ–Ω–∞", style=disnake.ButtonStyle.secondary)
    async def cancel_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_message("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", ephemeral=True)
        await inter.message.delete()

async def update_participants_message(channel, list_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞"""
    if not list_data:
        return
    
    data = load_data(list_data["guild_id"])
    if list_data.get("message_id"):
        try:
            message = await channel.fetch_message(list_data["message_id"])
            embed = disnake.Embed(
                title=f"üìã {list_data['name']}",
                description=await generate_participants_list(list_data),
                color=0x2b2d31
            )
            embed.set_footer(text=f"ID: {list_data['id']} | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ View –∫–∞–∂–¥—ã–π —Ä–∞–∑
            view = MainView(list_data["id"], list_data["guild_id"])
            await message.edit(embed=embed, view=view)
            return
        except:
            pass
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    embed = disnake.Embed(
        title=f"üìã {list_data['name']}",
        description=await generate_participants_list(list_data),
        color=0x2b2d31
    )
    embed.set_footer(text=f"ID: {list_data['id']} | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ View
    view = MainView(list_data["id"], list_data["guild_id"])
    message = await channel.send(embed=embed, view=view)
    
    list_data["message_id"] = message.id
    data["lists"][list_data["id"]] = list_data
    save_data(list_data["guild_id"], data)

async def generate_participants_list(list_data):
    if not list_data or not list_data["participants"]:
        return "*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç*"
    
    participants = list_data["participants"]
    sorted_participants = sorted(
        participants.items(), 
        key=lambda x: x[1]["registered_at"]
    )
    
    lines = []
    for user_id, info in sorted_participants:
        status = "‚úÖ" if info["has_rollback"] else "‚ùå"
        mention = f"<@{user_id}>"
        lines.append(f"{status} {mention}")
    
    return "\n".join(lines)

class MainView(disnake.ui.View):
    def __init__(self, list_id, guild_id):
        super().__init__(timeout=None)
        self.list_id = list_id
        self.guild_id = guild_id
    
    @disnake.ui.button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç", style=disnake.ButtonStyle.primary)  # –ë–ï–ó custom_id
    async def rollback_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        list_data = get_list(self.list_id, self.guild_id)
        if not list_data:
            await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
            
        user_id = str(inter.author.id)
        if user_id not in list_data["participants"]:
            await inter.response.send_message(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                ephemeral=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_existing_rollback = list_data["participants"][user_id]["has_rollback"]
        
        if has_existing_rollback:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
            class ChoiceView(disnake.ui.View):
                def __init__(self, list_id, guild_id):
                    super().__init__(timeout=60)
                    self.list_id = list_id
                    self.guild_id = guild_id
                
                @disnake.ui.button(label="–ó–∞–º–µ–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç", style=disnake.ButtonStyle.primary)
                async def replace_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                    await interaction.response.send_modal(RollbackModal(self.list_id, self.guild_id, has_existing_rollback=True))
                
                @disnake.ui.button(label="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–∞—Ç", style=disnake.ButtonStyle.danger)
                async def delete_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                    delete_view = DeleteRollbackView(self.list_id, self.guild_id)
                    await interaction.response.send_message(
                        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∫–∞—Ç?",
                        view=delete_view,
                        ephemeral=True
                    )
                
                @disnake.ui.button(label="–û—Ç–º–µ–Ω–∞", style=disnake.ButtonStyle.secondary)
                async def cancel_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                    await interaction.response.send_message("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", ephemeral=True)
            
            choice_view = ChoiceView(self.list_id, self.guild_id)
            
            await inter.response.send_message(
                "üìù –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                view=choice_view,
                ephemeral=True
            )
        else:
            # –ï—Å–ª–∏ –æ—Ç–∫–∞—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            await inter.response.send_modal(RollbackModal(self.list_id, self.guild_id, has_existing_rollback=False))
    
    @disnake.ui.button(label="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", style=disnake.ButtonStyle.secondary)  # –£–±—Ä–∞–ª custom_id
    async def refresh_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.defer(ephemeral=True)
        list_data = get_list(self.list_id, self.guild_id)
        if not list_data:
            await inter.followup.send("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞
        channel = bot.get_channel(list_data["channel_id"])
        if channel:
            await update_participants_message(channel, list_data)
        # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
        await update_status_message(list_data)
        await inter.edit_original_response(content="‚úÖ –û–±–∞ —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

@bot.event
async def on_ready():
    print(f'Bot {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    print(f'–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º')
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
    for guild_id, config in SERVER_CONFIGS.items():
        print(f"- –°–µ—Ä–≤–µ—Ä {guild_id}: {config['data_file']}")
    
    # –£–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ persistent views - —Ç–µ–ø–µ—Ä—å View —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@bot.slash_command(description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞—Ç–æ–≤")
async def create_list(inter: disnake.ApplicationCommandInteraction):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    await inter.response.send_modal(CreateListModal(inter.guild.id))

@bot.slash_command(description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ")
async def register_user(
    inter: disnake.ApplicationCommandInteraction,
    list_id: str = commands.Param(description="ID —Å–ø–∏—Å–∫–∞"),
    users: str = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ @ –∏–ª–∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    list_data = get_list(list_id, inter.guild.id)
    if not list_data:
        await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
    user_mentions = re.findall(r'<@!?(\d+)>', users)
    user_ids = re.findall(r'\b(\d{17,19})\b', users)
    
    all_user_ids = list(set(user_mentions + user_ids))
    
    if not all_user_ids:
        await inter.response.send_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", ephemeral=True)
        return
    
    registered_users = []
    already_registered = []
    
    for user_id in all_user_ids:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
            member = inter.guild.get_member(int(user_id))
            if not member:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                member = await bot.fetch_user(int(user_id))
            
            server_nickname = member.display_name
            
            if user_id in list_data["participants"]:
                already_registered.append(server_nickname)
            else:
                list_data["participants"][user_id] = {
                    "display_name": server_nickname,
                    "has_rollback": False,
                    "registered_at": datetime.now().isoformat()
                }
                registered_users.append(server_nickname)
        except:
            continue
    
    if registered_users or already_registered:
        data = load_data(inter.guild.id)
        data["lists"][list_id] = list_data
        save_data(inter.guild.id, data)
        
        response = []
        if registered_users:
            response.append(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(registered_users)}")
        if already_registered:
            response.append(f"‚ÑπÔ∏è –£–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(already_registered)}")
        
        await inter.response.send_message("\n".join(response), ephemeral=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
        # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞
        channel = bot.get_channel(list_data["channel_id"])
        if channel:
            await update_participants_message(channel, list_data)
        # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
        await update_status_message(list_data)
    else:
        await inter.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", ephemeral=True)

@bot.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–∞—Ç–æ–≤")
async def show_list(
    inter: disnake.ApplicationCommandInteraction,
    list_id: str = commands.Param(description="ID —Å–ø–∏—Å–∫–∞")
):
    list_data = get_list(list_id, inter.guild.id)
    if not list_data:
        await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    await inter.response.defer()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
    embed = disnake.Embed(
        title=f"üìã {list_data['name']}",
        description=await generate_participants_list(list_data),
        color=0x2b2d31
    )
    embed.set_footer(text=f"ID: {list_data['id']} | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    await inter.edit_original_response(
        content=f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_data['name']}' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω!",
        embed=embed,
        view=MainView(list_data["id"], inter.guild.id)
    )

@bot.slash_command(description="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
async def remove_user(
    inter: disnake.ApplicationCommandInteraction,
    list_id: str = commands.Param(description="ID —Å–ø–∏—Å–∫–∞"),
    user: disnake.User = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    list_data = get_list(list_id, inter.guild.id)
    if not list_data:
        await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    user_id = str(user.id)
    if user_id not in list_data["participants"]:
        await inter.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ!", ephemeral=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
    member = inter.guild.get_member(user.id)
    server_nickname = member.display_name if member else user.display_name
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ—Ç–∫–∞—Ç
    del list_data["participants"][user_id]
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    rollbacks_to_remove = []
    for timestamp, rollback in list_data["rollbacks"].items():
        if rollback["user_id"] == user_id:
            rollbacks_to_remove.append(timestamp)
    
    for timestamp in rollbacks_to_remove:
        del list_data["rollbacks"][timestamp]
    
    data = load_data(inter.guild.id)
    data["lists"][list_id] = list_data
    save_data(inter.guild.id, data)
    
    await inter.response.send_message(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {server_nickname} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ '{list_data['name']}'!", ephemeral=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
    # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞
    channel = bot.get_channel(list_data["channel_id"])
    if channel:
        await update_participants_message(channel, list_data)
    # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
    await update_status_message(list_data)

@bot.slash_command(description="–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫")
async def delete_list(
    inter: disnake.ApplicationCommandInteraction,
    list_id: str = commands.Param(description="ID —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    list_data = get_list(list_id, inter.guild.id)
    if not list_data:
        await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    data = load_data(inter.guild.id)
    del data["lists"][list_id]
    save_data(inter.guild.id, data)
    
    await inter.response.send_message(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_data['name']}' (ID: {list_id}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!", ephemeral=True)

@bot.slash_command(description="–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–∫–∞—Ç—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def reset_rollbacks(
    inter: disnake.ApplicationCommandInteraction,
    list_id: str = commands.Param(description="ID —Å–ø–∏—Å–∫–∞")
):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    list_data = get_list(list_id, inter.guild.id)
    if not list_data:
        await inter.response.send_message("‚ùå –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user_id in list_data["participants"]:
        list_data["participants"][user_id]["has_rollback"] = False
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ç–∫–∞—Ç—ã
    list_data["rollbacks"] = {}
    
    data = load_data(inter.guild.id)
    data["lists"][list_id] = list_data
    save_data(inter.guild.id, data)
    
    await inter.response.send_message(f"‚úÖ –í—Å–µ –æ—Ç–∫–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ '{list_data['name']}' —Å–±—Ä–æ—à–µ–Ω—ã!", ephemeral=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
    # 1. –°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤ –∫–∞–Ω–∞–ª–µ —Å–ø–∏—Å–∫–∞
    channel = bot.get_channel(list_data["channel_id"])
    if channel:
        await update_participants_message(channel, list_data)
    # 2. –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞—Ç–æ–≤ - –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
    await update_status_message(list_data)

@bot.slash_command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏")
async def list_all(inter: disnake.ApplicationCommandInteraction):
    if not is_admin(inter.author):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    data = load_data(inter.guild.id)
    if not data["lists"]:
        await inter.response.send_message("üìã –°–ø–∏—Å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!", ephemeral=True)
        return
    
    embed = disnake.Embed(title="üìã –í—Å–µ —Å–ø–∏—Å–∫–∏", color=0x2b2d31)
    
    for list_id, list_data in data["lists"].items():
        participants_count = len(list_data["participants"])
        rollbacks_count = sum(1 for p in list_data["participants"].values() if p["has_rollback"])
        
        embed.add_field(
            name=f"{list_data['name']} (ID: {list_id})",
            value=f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n–û—Ç–∫–∞—Ç–æ–≤: {rollbacks_count}",
            inline=True
        )
    
    await inter.response.send_message(embed=embed, ephemeral=True)

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
    token = None
    try:
        if os.path.exists('.env'):
            print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω, —á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω...")
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('DISCORD_BOT_TOKEN='):
                        token = line.split('=', 1)[1].strip()
                        print(f"–¢–æ–∫–µ–Ω –∏–∑ .env: {token[:20]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
                        break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ .env, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not token:
        token = os.getenv("DISCORD_BOT_TOKEN")
        if token:
            print("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if not token:
        print("‚ùå DISCORD_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞: DISCORD_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–æ–∫–µ–Ω–∞ (–æ–±—ã—á–Ω–æ 59-72 —Å–∏–º–≤–æ–ª–∞)
        if len(token) < 50:
            print(f"‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ç–æ–∫–µ–Ω–µ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –æ—à–∏–±–∫–∏")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        else:
            try:
                print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                bot.run(token)
            except disnake.errors.PrivilegedIntentsRequired:
                print("‚ùå –û–®–ò–ë–ö–ê: –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã!")
                print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://discord.com/developers/applications/")
                print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
                print("3. –í —Ä–∞–∑–¥–µ–ª–µ Bot –≤–∫–ª—é—á–∏—Ç–µ:")
                print("   - SERVER MEMBERS INTENT")
                print("   - MESSAGE CONTENT INTENT")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            except disnake.errors.LoginFailure:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
                print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")